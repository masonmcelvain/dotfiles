{{ if eq .chezmoi.hostname "mason-xps" -}}
#------------------------------------------------------------------------------
# Ubuntu defaults
#------------------------------------------------------------------------------
# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
#------------------------------------------------------------------------------
{{- end }}

{{ if eq .chezmoi.hostname "cominor" -}}
#------------------------------------------------------------------------------
# Cominor
#------------------------------------------------------------------------------
# Source global definitions
if [ -f /etc/bashrc  ]; then
      . /etc/bashrc
fi

# https://github.com/twpayne/chezmoi/issues/1332#issuecomment-927367673
export LESS=-FRX
ssh-use-gpg
#------------------------------------------------------------------------------
{{- end }}

{{ if eq .chezmoi.hostname "mason-xps" -}}
#------------------------------------------------------------------------------
# Local
#------------------------------------------------------------------------------
# Tell SSH how to access gpg-agent
# https://opensource.com/article/19/4/gpg-subkeys-ssh
export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
export GPG_TTY=$(tty)

# Generated for envman. Do not edit.
[ -s "$HOME/.config/envman/load.sh" ] && source "$HOME/.config/envman/load.sh"

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

. "$HOME/.cargo/env"

export FLYCTL_INSTALL="/home/mason/.fly"
export PATH="$FLYCTL_INSTALL/bin:$PATH"
#------------------------------------------------------------------------------
{{- end }}

export PATH="$HOME/bin:$PATH"

# If is interactive terminal and file exists
# https://www.gnu.org/software/bash/manual/bash.html#Is-this-Shell-Interactive_003f
if [[ ! (-z "$PS1") ]] && [ -f ~/.bash_keybindings ]; then
    . ~/.bash_keybindings
fi

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

if type hx &> /dev/null; then
   export EDITOR='hx'
else
   export EDITOR='vim'
fi
if type bat &> /dev/null; then
   export MANPAGER="sh -c 'col -bx | bat -l man -p'"
{{ if eq .chezmoi.hostname "cominor" -}}
   export MANROFFOPT="-c"
{{- end }}
fi

eval "$(zoxide init bash)"

# https://starship.rs/
eval "$(starship init bash)"
export LC_ALL="en_US.UTF-8"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH=$BUN_INSTALL/bin:$PATH

# pnpm
export PNPM_HOME="$HOME/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end
